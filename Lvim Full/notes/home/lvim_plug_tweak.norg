* run.nvim : run.lua 
  @code lua
    java       = 'java $#',
    python     = 'python $#',
  @end


* noice.nvim : hack.lua
  @code lua
    function M.fix_incsearch()
    ---@type integer|nil
    local conceallevel

    vim.api.nvim_create_autocmd("CmdlineEnter", {
      group = M.group,
      callback = function(event)
        if event.match == "/" or event.match == "?" then
          conceallevel = vim.wo.conceallevel
          vim.wo.conceallevel = 0
          require('mini.map').refresh()
        end
      end,
    })

    vim.api.nvim_create_autocmd("CmdlineLeave", {
      group = M.group,
      callback = function(event)
        if conceallevel and (event.match == "/" or event.match == "?") then
          vim.wo.conceallevel = conceallevel
          require('mini.map').refresh()
          conceallevel = nil
        end
      end,
    })
    end
  @end

* treesitter-textobject.nvim : select.lua
  @code lua
    function M.visual_select(query_string, keymap_mode)
      local lookahead = configs.get_module("textobjects.select").lookahead
      local lookbehind = configs.get_module("textobjects.select").lookbehind
      local surrounding_whitespace = configs.get_module("textobjects.select").include_surrounding_whitespace
      local bufnr, textobject =
      shared.textobject_at_point(query_string, nil, nil, { lookahead = lookahead, lookbehind = lookbehind })
      if textobject then
        local selection_mode = keymap_mode ~= nil and keymap_mode or 'v'
        if val_or_return(surrounding_whitespace, {
          query_string = query_string,
          selection_mode = selection_mode,
        })
        then
          textobject = include_surrounding_whitespace(bufnr, textobject, selection_mode)
        end
        ts_utils.update_selection(bufnr, textobject, selection_mode)
      end
  end
  @end
